# version: '3.8'

services:

  postgres-db:
    image: postgres:15
    container_name: postgres-auth-db
    environment:
      POSTGRES_DB: auth_service
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    volumes:
      - postgres_data:/var/lib/postgresql/data
      -  ./init-multiple-dbs.sh:/docker-entrypoint-initdb.d/init-multiple-dbs.sh
    ports:
      - "5432:5432"
    networks:
      - backend
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7
    container_name: redis-server
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data

  eureka-server:
    build:
      context: ./EurekaServer
      dockerfile: Dockerfile
    container_name: eureka-server
    ports:
      - "8761:8761"
    networks:
      - backend
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8761/actuator/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
  
  medicine-service:
    build:
      context: ./medicine
      dockerfile: Dockerfile
    container_name: medicine-service
    ports:
      - "6004:6004"
      - "6104:6104"
    depends_on:
      postgres-db:
        condition: service_healthy
      eureka-server:
        condition: service_started
      loki:
        condition: service_healthy
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    networks:
      - backend
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:6004/medicine/actuator/health && curl -f http://eureka-server:8761/eureka/apps/medicine || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
  catalog-service:
    build:
      context: ./catalog
      dockerfile: Dockerfile
    container_name: catalog-service
    ports:
      - "6005:6005"
      - "6105:6105"
    depends_on:
      
      postgres-db:
        condition: service_healthy
      eureka-server:
        condition: service_started
      loki:
        condition: service_healthy
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    networks:
      - backend
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:6005/catalog/actuator/health && curl -f http://eureka-server:8761/eureka/apps/catalog || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
  inventory-service:
    build:
      context: ./inventory
      dockerfile: Dockerfile
    container_name: inventory-service
    ports:
      - "6007:6007"
      - "6107:6107"
    depends_on:
      
      postgres-db:
        condition: service_healthy
      eureka-server:
        condition: service_started
      loki:
        condition: service_healthy
      medicine-service:
        condition: service_healthy
      catalog-service:
        condition: service_healthy
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    networks:
      - backend
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:6007/actuator/health && curl -f http://eureka-server:8761/eureka/apps/inventory || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  users-service:
    build:
      context: ./users
      dockerfile: Dockerfile
    container_name: users-service
    ports:
      - "6002:6002"
      - "6102:6102"
    depends_on:
      postgres-db:
        condition: service_healthy
      eureka-server:
        condition: service_started
      loki:
        condition: service_healthy
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    networks:
      - backend
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:6002/actuator/health && curl -f http://eureka-server:8761/eureka/apps/users || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  billing-service:
    build:
      context: ./billing
      dockerfile: Dockerfile
    container_name: billing-service
    ports:
      - "6003:6003"
      - "6103:6103"
    depends_on:
      eureka-server:
        condition: service_healthy
      loki:
        condition: service_healthy
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    networks:
      - backend
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:6003/actuator/health && curl -f http://eureka-server:8761/eureka/apps/BILLING || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  auth-service:
    build:
      context: ./AuthService
      dockerfile: Dockerfile
    container_name: auth-service
    ports:
      - "6001:6001"
      - "6101:6101"
    depends_on:
      postgres-db:
        condition: service_healthy
      eureka-server:
        condition: service_healthy
      users-service:
        condition: service_healthy
      billing-service:
        condition: service_healthy
      loki:
        condition: service_healthy
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    networks:
      - backend
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:6001/actuator/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
  
  gateway-service:
    build:
      context: ./gateway
      dockerfile: Dockerfile
    container_name: gateway-service
    ports:
      - "6006:6006"
    depends_on:
      eureka-server:
        condition: service_healthy
      auth-service:
        condition: service_healthy
      users-service:
        condition: service_healthy
      billing-service:
        condition: service_healthy
      loki:
        condition: service_healthy
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    networks:
      - backend
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:6006/actuator/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Grafana Loki for log aggregation (replacing ELK stack)
  loki:
    image: grafana/loki:2.8.0
    container_name: loki
    ports:
      - "3100:3100"
    command: -config.file=/etc/loki/local-config.yaml
    volumes:
      - loki-data:/loki
    networks:
      - backend
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:3100/ready || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  # Promtail for log collection (equivalent to Filebeat)
  promtail:
    image: grafana/promtail:2.8.0
    container_name: promtail
    volumes:
      - /var/log:/var/log
      - ./grafana/promtail-config.yml:/etc/promtail/config.yml
    command: -config.file=/etc/promtail/config.yml
    depends_on:
      - loki
    networks:
      - backend

  # Grafana for visualization (replacing Kibana)
  grafana:
    image: grafana/grafana:10.0.0
    container_name: grafana
    # ports:
      # - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana-data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning
    depends_on:
      - prometheus
      - loki
    networks:
      - backend
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:3000/api/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Adding Prometheus for metrics collection
  prometheus:
    image: prom/prometheus:v2.45.0
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./grafana/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    networks:
      - backend
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:9090/-/healthy || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

networks:
  backend:
    driver: bridge

volumes:
  loki-data:
    driver: local
  grafana-data:
    driver: local
  prometheus-data:
    driver: local
  redis_data:
    driver: local
  postgres_data:
    driver: local
    