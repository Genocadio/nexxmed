spring:
  application:
    name: gateway
  data:
    redis:
      host: localhost
      port: 6379
      timeout: 2000ms
  # Spring Cloud Gateway Configuration
  cloud:
    gateway:
      routes:
        # Auth Service Routes
        - id: auth-service
          uri: lb://AuthService
          predicates:
            - Path=/api/auth/**
          filters:
            - StripPrefix=1
            - name: CircuitBreaker
              args:
                name: auth-service
                fallbackUri: forward:/fallback/auth

        # Billing Service Routes
        - id: billing-service
          uri: lb://billing
          predicates:
            - Path=/api/billing/**
          filters:
            - StripPrefix=1
            - name: CircuitBreaker
              args:
                name: billing-service
                fallbackUri: forward:/fallback/billing
            - name: AuthFilter

        # Health Check Routes
        - id: auth-health
          uri: lb://AuthService
          predicates:
            - Path=/health/auth/**
          filters:
            - StripPrefix=2
            - RewritePath=/health/auth/(?<segment>.*), /actuator/health

        - id: billing-health
          uri: lb://billing
          predicates:
            - Path=/health/billing/**
          filters:
            - StripPrefix=2
            - RewritePath=/health/billing/(?<segment>.*), /actuator/health

        # Medicine Service Routes
        - id: medicine-service
          uri: lb://medicine
          predicates:
            - Path=/api/medicine/**
          filters:
            - StripPrefix=1
            - name: CircuitBreaker
              args:
                name: medicine-service
                fallbackUri: forward:/fallback/medicine
            # Add DedupeResponseHeader to remove duplicate CORS headers
            - name: DedupeResponseHeader
              args:
                name: Access-Control-Allow-Origin Access-Control-Allow-Credentials
                strategy: RETAIN_FIRST

        #catalog-service
        - id: catalog-service
          uri: lb://catalog
          predicates:
            - Path=/api/catalog/**
          filters:
            - StripPrefix=1
            - name: CircuitBreaker
              args:
                name: catalog-service
                fallbackUri: forward:/fallback/catalog
            # Add DedupeResponseHeader to remove duplicate CORS headers
            - name: DedupeResponseHeader
              args:
                name: Access-Control-Allow-Origin Access-Control-Allow-Credentials
                strategy: RETAIN_FIRST
        # Inventory service
        - id: inventory-service
          uri: lb://inventory
          predicates:
            - Path=/api/inventory/**
          filters:
            - StripPrefix=1
            - name: CircuitBreaker
              args:
                name: inventory-service
                fallbackUri: forward:/fallback/inventory
            # Add DedupeResponseHeader to remove duplicate CORS headers
            - name: DedupeResponseHeader
              args:
                name: Access-Control-Allow-Origin Access-Control-Allow-Credentials
                strategy: RETAIN_FIRST

      # Global CORS Configuration
      globalcors:
        add-to-simple-url-handler-mapping: true
        corsConfigurations:
          '[/**]':
            allowedOrigins:
              - "http://localhost:3000"
              - "http://localhost:8080"
              - "https://your-frontend-domain.com"
            allowedMethods:
              - GET
              - POST
              - PUT
              - DELETE
              - OPTIONS
            allowedHeaders: "*"
            allowCredentials: true
            maxAge: 3600

      # Default Filters
      default-filters:
        - name: Retry
          args:
            retries: 3
            statuses: BAD_GATEWAY,GATEWAY_TIMEOUT
            methods: GET,POST,PUT,DELETE
        - name: RequestRateLimiter
          args:
            redis-rate-limiter.replenishRate: 10
            redis-rate-limiter.burstCapacity: 20
            redis-rate-limiter.requestedTokens: 1
            key-resolver: "#{@userKeyResolver}"
        # Add global DedupeResponseHeader filter
        - name: DedupeResponseHeader
          args:
            name: Access-Control-Allow-Origin Access-Control-Allow-Credentials
            strategy: RETAIN_FIRST

server:
  port: 6006

# Eureka Configuration
eureka:
  client:
    serviceUrl:
      defaultZone: http://eureka-server:8761/eureka/
    register-with-eureka: true
    fetch-registry: true
  instance:
    prefer-ip-address: true
    instanceId: ${spring.application.name}:${random.uuid}

# JWT Configuration
jwt:
  secret: NWI4eUJFSE1iUWVUaFdtWnE0dDZ3OXpDRkpOY1JmVWpYbjJyNXU4eEFER0thUGRTZ1ZrWQ==
  expiration: 86400000

# Resilience4j Configuration
resilience4j:
  circuitbreaker:
    instances:
      auth-service:
        registerHealthIndicator: true
        slidingWindowSize: 10
        slidingWindowType: COUNT_BASED
        minimumNumberOfCalls: 5
        failureRateThreshold: 50
        waitDurationInOpenState: 30s
        permittedNumberOfCallsInHalfOpenState: 3
        automaticTransitionFromOpenToHalfOpenEnabled: true
      billing-service:
        registerHealthIndicator: true
        slidingWindowSize: 10
        slidingWindowType: COUNT_BASED
        minimumNumberOfCalls: 5
        failureRateThreshold: 50
        waitDurationInOpenState: 30s
        permittedNumberOfCallsInHalfOpenState: 3
        automaticTransitionFromOpenToHalfOpenEnabled: true

  retry:
    instances:
      auth-service:
        maxAttempts: 3
        waitDuration: 1s
        enableExponentialBackoff: true
        exponentialBackoffMultiplier: 2
      billing-service:
        maxAttempts: 3
        waitDuration: 1s
        enableExponentialBackoff: true
        exponentialBackoffMultiplier: 2

# Management Configuration
management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics,gateway
  endpoint:
    health:
      show-details: always
    gateway:
      access: unrestricted
  prometheus:
    metrics:
      export:
        enabled: true

# Logging Configuration
logging:
  level:
    org.springframework.cloud.gateway: DEBUG
    org.springframework.security: DEBUG
    com.nexxserve.gateway: DEBUG
  pattern:
    console: "%d{yyyy-MM-dd HH:mm:ss} - %msg%n"
    file: "%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{36} - %msg%n"
  file:
    name: logs/gateway.log